AWSTemplateFormatVersion: 2010-09-09

Parameters:
  StateTableArn:
    Type: String
    Description: the ARN of the table used to hold the states
  TaskTableArn:
    Type: String
    Description: the ARN of the table used to hold the tasks
  StateApiArn:
    Type: String
    Description: the ARN of the GQL API

Resources:
  writeXray:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Sub "writeXray-${AWS::StackName}"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'xray:PutTraceSegments'
              - 'xray:PutTelemetryRecords'
              - 'xray:GetSamplingRules'
              - 'xray:GetSamplingTargets'
              - 'xray:GetSamplingStatisticSummaries'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref worker

  worker:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub "worker-${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - appsync.amazonaws.com
                - events.amazonaws.com
                - lambda.amazonaws.com

  workLogs:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Sub "workLogs-${AWS::StackName}"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref worker

  invokeLambda:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Sub "invokeLambda-${AWS::StackName}"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'lambda:InvokeFunction'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref worker

  workStateTable:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Sub "workStateTable-${AWS::StackName}"
      PolicyDocument: >
        {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Action": [
                        "dynamodb:Scan",
                        "dynamodb:Query"
                    ],
                    "Resource": !Sub "${StateTableArn}/index/*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "dynamodb:BatchGetItem",
                        "dynamodb:BatchWriteItem",
                        "dynamodb:UpdateTimeToLive",
                        "dynamodb:ConditionCheckItem",
                        "dynamodb:PutItem",
                        "dynamodb:DescribeTable",
                        "dynamodb:DeleteItem",
                        "dynamodb:GetItem",
                        "dynamodb:Scan",
                        "dynamodb:Query",
                        "dynamodb:UpdateItem",
                        "dynamodb:DescribeTimeToLive"
                    ],
                    "Resource": !Ref StateTableArn
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "dynamodb:ListGlobalTables",
                        "dynamodb:ListTables",
                        "dynamodb:ListBackups",
                        "dynamodb:DescribeLimits"
                    ],
                    "Resource": "*"
                }
            ]
        }
      Roles:
        - !Ref worker

  workTaskTable:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Sub "workTaskTable-${AWS::StackName}"
      PolicyDocument: >
        {
          "Version": "2012-10-17",
          "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "dynamodb:Scan",
              "dynamodb:Query"
            ],
            "Resource": !Sub "${TaskTableArn}/index/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "dynamodb:BatchGetItem",
              "dynamodb:BatchWriteItem",
              "dynamodb:UpdateTimeToLive",
              "dynamodb:ConditionCheckItem",
              "dynamodb:PutItem",
              "dynamodb:DescribeTable",
              "dynamodb:DeleteItem",
              "dynamodb:GetItem",
              "dynamodb:Scan",
              "dynamodb:Query",
              "dynamodb:UpdateItem",
              "dynamodb:DescribeTimeToLive"
            ],
            "Resource": !Ref TaskTableArn
          },
          {
            "Effect": "Allow",
            "Action": [
              "dynamodb:ListGlobalTables",
              "dynamodb:ListTables",
              "dynamodb:ListBackups",
              "dynamodb:DescribeLimits"
            ],
            "Resource": "*"
          }
          ]
        }
      Roles:
        - !Ref worker

  queryGql:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Sub "queryGql-${AWS::StackName}"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'appsync:ListDataSources'
              - 'appsync:ListFunctions'
              - 'appsync:GetDataSource'
              - 'appsync:ListApiKeys'
              - 'appsync:GetSchemaCreationStatus'
              - 'appsync:GetFunction'
              - 'appsync:GetResolver'
              - 'appsync:ListGraphqlApis'
              - 'appsync:GetGraphqlApi'
              - 'appsync:ListTypes'
              - 'appsync:GetIntrospectionSchema'
              - 'appsync:GraphQL'
              - 'appsync:ListResolvers'
              - 'appsync:GetType'
            Resource: !Ref StateApiArn
            Effect: Allow
      Roles:
        - !Ref worker

  passRole:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Sub "passRole-${AWS::StackName}"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: 'iam:PassRole'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref worker

  workKeys:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Sub "workKeys-${AWS::StackName}"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'kms:Decrypt'
              - 'kms:GenerateDataKey*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref worker

  workSns:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Sub "workSns-${AWS::StackName}"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: 'sns:Publish'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref worker

Outputs:
  WorkerRoleArn:
    Description: the ARN of the generated worker IAM role
    Value: !GetAtt worker.Arn